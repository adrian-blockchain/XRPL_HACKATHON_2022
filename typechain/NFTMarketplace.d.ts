/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "cancelOffer(uint256)": FunctionFragment;
    "claimFunds()": FunctionFragment;
    "fillOffer(uint256)": FunctionFragment;
    "makeOffer(uint256,uint256)": FunctionFragment;
    "offerCount()": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "userFunds(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userFunds", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userFunds", data: BytesLike): Result;

  events: {
    "ClaimFunds(address,uint256)": EventFragment;
    "Offer(uint256,uint256,address,uint256,bool,bool)": EventFragment;
    "OfferCancelled(uint256,uint256,address)": EventFragment;
    "OfferFilled(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Offer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferFilled"): EventFragment;
}

export type ClaimFundsEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type OfferEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
    offerId: BigNumber;
    id: BigNumber;
    user: string;
    price: BigNumber;
    fulfilled: boolean;
    cancelled: boolean;
  }
>;

export type OfferCancelledEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    offerId: BigNumber;
    id: BigNumber;
    owner: string;
  }
>;

export type OfferFilledEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    offerId: BigNumber;
    id: BigNumber;
    newOwner: string;
  }
>;

export class NFTMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTMarketplaceInterface;

  functions: {
    cancelOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOffer(
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
        offerId: BigNumber;
        id: BigNumber;
        user: string;
        price: BigNumber;
        fulfilled: boolean;
        cancelled: boolean;
      }
    >;

    userFunds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelOffer(
    _offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOffer(
    _offerId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    _id: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offerCount(overrides?: CallOverrides): Promise<BigNumber>;

  offers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
      offerId: BigNumber;
      id: BigNumber;
      user: string;
      price: BigNumber;
      fulfilled: boolean;
      cancelled: boolean;
    }
  >;

  userFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFunds(overrides?: CallOverrides): Promise<void>;

    fillOffer(_offerId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    makeOffer(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerCount(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
        offerId: BigNumber;
        id: BigNumber;
        user: string;
        price: BigNumber;
        fulfilled: boolean;
        cancelled: boolean;
      }
    >;

    userFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClaimFunds(address,uint256)"(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    ClaimFunds(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "Offer(uint256,uint256,address,uint256,bool,bool)"(
      offerId?: null,
      id?: null,
      user?: null,
      price?: null,
      fulfilled?: null,
      cancelled?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, boolean, boolean],
      {
        offerId: BigNumber;
        id: BigNumber;
        user: string;
        price: BigNumber;
        fulfilled: boolean;
        cancelled: boolean;
      }
    >;

    Offer(
      offerId?: null,
      id?: null,
      user?: null,
      price?: null,
      fulfilled?: null,
      cancelled?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, boolean, boolean],
      {
        offerId: BigNumber;
        id: BigNumber;
        user: string;
        price: BigNumber;
        fulfilled: boolean;
        cancelled: boolean;
      }
    >;

    "OfferCancelled(uint256,uint256,address)"(
      offerId?: null,
      id?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { offerId: BigNumber; id: BigNumber; owner: string }
    >;

    OfferCancelled(
      offerId?: null,
      id?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { offerId: BigNumber; id: BigNumber; owner: string }
    >;

    "OfferFilled(uint256,uint256,address)"(
      offerId?: null,
      id?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { offerId: BigNumber; id: BigNumber; newOwner: string }
    >;

    OfferFilled(
      offerId?: null,
      id?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { offerId: BigNumber; id: BigNumber; newOwner: string }
    >;
  };

  estimateGas: {
    cancelOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOffer(
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offerCount(overrides?: CallOverrides): Promise<BigNumber>;

    offers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    userFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOffer(
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
